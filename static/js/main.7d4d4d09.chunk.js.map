{"version":3,"sources":["LinkList/LinkList.js","data/Links.js","TimePanel/TimePanel.js","SearchPanel/SearchPanel.js","App.js","serviceWorker.js","index.js"],"names":["LinkList","props","links","linkList","Object","keys","map","linkTitle","react_default","a","createElement","key","class","linkObject","link","className","rel","href","target","label","listOfLinks","Productive","CourseWork","TimePanel","time","date","SearchPanel","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","e","preventDefault","url","concat","state","searchValue","window","open","setState","onChange","value","noValidate","type","name","placeholder","Component","App","_this2","setInterval","dt","Date","toLocaleDateString","toLocaleTimeString","src_TimePanel_TimePanel","src_SearchPanel_SearchPanel","src_LinkList_LinkList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d4d4d09.chunk.js","sourcesContent":["import React from 'react';\r\nimport './LinkList.scss';\r\n\r\nconst LinkList = props => {\r\n  const { links } = props;\r\n  const linkList = Object.keys(links).map(linkTitle => (\r\n    <div key={linkTitle} class=\"link-section\">\r\n      <h1 class=\"section-header\">{linkTitle}</h1>\r\n      <div class=\"hide-overflow\">\r\n        <ul>\r\n          {links[linkTitle].map(linkObject => (\r\n            <li key={linkObject.link}>\r\n              <a\r\n                className=\"link-item\"\r\n                rel=\"noopener noreferrer\"\r\n                href={linkObject.link}\r\n                target=\"_blank\"\r\n              >\r\n                {linkObject.label}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  ));\r\n  return <div className=\"favorite-links\">{linkList}</div>;\r\n};\r\n\r\nexport default LinkList;\r\n","export const listOfLinks = {\r\n  Productive: [\r\n    {\r\n      link: \"https://todoist.com/\",\r\n      label: \"ToDoIst\"\r\n    },\r\n    {\r\n      link: \"https://webmail.gm.com/\",\r\n      label: \"Work Email\"\r\n    },\r\n    {\r\n      link: \"https://linkedin.com/\",\r\n      label: \"LinkedIn\"\r\n    }\r\n  ],\r\n  CourseWork: [\r\n    {\r\n      link: \"https://udemy.com\",\r\n      label: \"Udemy\"\r\n    },\r\n    {\r\n      link: \"https://frontendmasters.com\",\r\n      label: \"FrontEndMasters\"\r\n    }\r\n  ]\r\n};\r\n","import React from 'react';\r\nimport './TimePanel.scss';\r\n\r\nconst TimePanel = props => {\r\n  const { time, date } = props;\r\n  return (\r\n    <div className=\"time-panel\">\r\n      <div className=\"datetimer-container\">\r\n        <span className=\"current-date\">{date}</span>\r\n      </div>\r\n      <div className=\"datetimer-container\">\r\n        <span className=\"current-time\">{time}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimePanel;\r\n","import React, { Component } from 'react';\r\nimport './SearchPanel.scss';\r\n\r\nclass SearchPanel extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchValue: ''\r\n    };\r\n  }\r\n  onSubmit = e => {\r\n    const prefixUrl = 'https://www.google.com/search?q=';\r\n    e.preventDefault();\r\n    const url = `${prefixUrl}${this.state.searchValue}`;\r\n    window.open(url);\r\n    this.setState({\r\n      searchValue: ''\r\n    });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      searchValue: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-input mb-50\">\r\n        <form onSubmit={this.onSubmit} noValidate>\r\n          <input\r\n            type=\"text\"\r\n            className=\"lg-text-input\"\r\n            name=\"google-search\"\r\n            placeholder=\"Google\"\r\n            value={this.state.searchValue}\r\n            onChange={this.onChange}\r\n          />\r\n          <input type=\"Submit\" className=\"btn btn-primary\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPanel;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport LinkList from './LinkList/LinkList';\nimport { listOfLinks } from './data/Links';\nimport TimePanel from './TimePanel/TimePanel';\nimport SearchPanel from './SearchPanel/SearchPanel';\n\nclass App extends Component {\n  state = {\n    date: '',\n    time: ''\n  };\n  componentDidMount() {\n    setInterval(() => {\n      const dt = new Date();\n      this.setState({\n        date: dt.toLocaleDateString(),\n        time: dt.toLocaleTimeString()\n      });\n    }, 1000);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <TimePanel date={this.state.date} time={this.state.time} />\n          <SearchPanel />\n          <LinkList links={listOfLinks} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}